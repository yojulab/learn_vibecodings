{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Docker Compose 환경 설정",
        "description": "FastAPI, Vue3, MongoDB 컨테이너를 포함하는 docker-compose.yml 파일 작성 및 로컬 서비스 실행 환경 구성",
        "details": "- docker-compose.yml 파일 생성\n- services: backend(FastAPI), frontend(Vite+Vue3), db(MongoDB)\n- 네트워크 및 볼륨 설정\n- 각 서비스에 대한 빌드·포트 매핑 지정",
        "testStrategy": "docker-compose up 실행 후\n1) MongoDB 컨테이너가 정상 구동되는지 확인\n2) http://localhost:8000/docs 에서 FastAPI Swagger UI 접속 확인\n3) http://localhost:5173 에서 Vue 앱 dev 서버 접속 확인",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "프론트엔드 초기 설정 (Vue3+Vite+Tailwind)",
        "description": "Vue3 프로젝트 생성, Vite 설정, TailwindCSS 및 PostCSS 통합",
        "details": "- npx create-vite@latest blog-frontend --template vue\n- cd blog-frontend && npm install tailwindcss postcss autoprefixer eslint prettier\n- tailwind.config.js, postcss.config.js 설정\n- ESLint, Prettier 초기 설정 파일(.eslintrc.js, .prettierrc) 추가",
        "testStrategy": "npm run dev 실행 후\n1) HMR 동작 확인 (컴포넌트 수정 시 브라우저 실시간 반영)\n2) Tailwind 스타일 클래스 적용된 샘플 컴포넌트 생성 후 스타일 반영 확인",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "백엔드 초기 설정 (FastAPI)",
        "description": "FastAPI 프로젝트 초기 구조 생성, Dockerfile 및 requirements.txt 작성",
        "details": "- 프로젝트 디렉터리 backend 생성\n- main.py에 FastAPI 인스턴스 생성 및 root 엔드포인트 작성\n- requirements.txt에 fastapi, uvicorn, motor, pydantic 추가\n- Dockerfile 작성: python:3.11 기반, uvicorn 실행 명령 포함",
        "testStrategy": "docker-compose up 후\n1) 컨테이너 로그에서 uvicorn 서버 정상 시작 확인\n2) http://localhost:8000/ 접속 시 root 응답(예: {'status':'ok'}) 확인",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "MongoDB 연결 및 Pydantic 모델 정의",
        "description": "FastAPI에서 Motor를 사용한 MongoDB 비동기 연결 설정 및 Post 모델 정의",
        "details": "- motor.motor_asyncio.AsyncIOMotorClient를 이용해 db_mongodb 호스트 연결\n- settings.py 또는 environment 변수로 DB URI 관리\n- Pydantic BaseModel로 Post 클래스 정의(id, title, content, category, author_id, created_at, updated_at)\n- MongoDB 컬렉션 초기화 및 인덱스 설정 예시 작성",
        "testStrategy": "별도 스크립트 또는 pytest로\n1) 샘플 Post 문서를 삽입(insert_one) 후 find_one으로 조회\n2) 모델 필드 타입 검증(pydantic ValidationError 발생 여부) 확인",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "비동기 MongoDB 연결 설정",
            "description": "Motor AsyncIOMotorClient를 이용해 MongoDB에 비동기 연결을 설정하고 DB URI를 환경 변수로 관리합니다.",
            "dependencies": [],
            "details": "- settings.py 또는 .env 파일에 DB_URI 설정\n- motor.motor_asyncio.AsyncIOMotorClient로 연결 객체 생성\n- FastAPI 종속성(dependency)으로 등록",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Pydantic Post 모델 정의",
            "description": "Pydantic BaseModel을 사용해 Post 데이터 모델(id, title, content 등)을 정의합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "- id, title, content, category, author_id, created_at, updated_at 필드 타입 지정\n- 기본값 및 유효성 검증 로직 추가",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "MongoDB 컬렉션 초기화 및 인덱스 설정",
            "description": "Post 컬렉션을 초기화하고 검색 성능을 위한 인덱스를 생성합니다.",
            "dependencies": [
              "4.2"
            ],
            "details": "- 컬렉션 이름 지정 및 가져오기\n- title, author_id 등의 필드에 인덱스 생성 코드 작성\n- unique 및 TTL 인덱스 옵션 예시 추가",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "연결 및 모델 검증 테스트 작성",
            "description": "샘플 문서 삽입·조회 및 Pydantic 모델 유효성 검증을 위한 테스트 코드를 작성합니다.",
            "dependencies": [
              "4.3"
            ],
            "details": "- insert_one 후 find_one으로 데이터 확인\n- 잘못된 데이터 입력 시 ValidationError 발생 여부 테스트\n- pytest 또는 별도 스크립트 형태로 구현",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "게시글 CRUD API 구현",
        "description": "GET/POST/PUT/DELETE 엔드포인트를 FastAPI로 작성하여 게시글 CRUD 기능 완성",
        "details": "- /posts 라우터 생성\n- GET /posts: all posts 리스트 반환\n- GET /posts/{id}: 단일 Post 반환(404 처리 포함)\n- POST /posts: Pydantic 모델로 body 검증 후 insert\n- PUT /posts/{id}: 부분/전체 업데이트 로직 구현\n- DELETE /posts/{id}: 문서 삭제\n- 각 엔드포인트에 적절한 status code 및 예외 처리 추가",
        "testStrategy": "pytest 와 httpx 비동기 클라이언트 사용\n1) CRUD 시나리오 테스트(생성→조회→수정→삭제)\n2) 잘못된 ID 요청 시 404 또는 422 에러 코드 반환 검증",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "라우터 및 기본 설정",
            "description": "/posts 라우터 생성 및 FastAPI 앱에 등록하고 DB 연결 설정",
            "dependencies": [],
            "details": "/posts 라우터 생성 및 include_router, Motor DB 클라이언트 주입",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "GET 엔드포인트 구현",
            "description": "GET /posts 및 GET /posts/{id} 구현과 404 예외 처리",
            "dependencies": [
              "5.1"
            ],
            "details": "GET /posts: 모든 게시글 조회, GET /posts/{id}: 단일 조회 및 존재하지 않을 시 HTTPException 404 반환",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "POST 엔드포인트 구현",
            "description": "POST /posts 구현과 Pydantic 검증 후 데이터 삽입",
            "dependencies": [
              "5.1"
            ],
            "details": "Pydantic 모델로 요청 본문 검증 후 insert_one 수행, 생성 성공 시 201 상태 코드 반환",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "PUT 엔드포인트 구현",
            "description": "PUT /posts/{id} 부분/전체 업데이트 로직과 예외 처리",
            "dependencies": [
              "5.1",
              "5.2"
            ],
            "details": "존재 여부 확인 후 update_one 수행, 업데이트 없을 시 404 예외, 성공 시 200 반환",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "DELETE 엔드포인트 구현",
            "description": "DELETE /posts/{id} 구현과 삭제 예외 처리",
            "dependencies": [
              "5.1",
              "5.2"
            ],
            "details": "존재 여부 확인 후 delete_one 수행, 삭제 없을 시 404 예외, 성공 시 204 상태 코드 반환",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Axios 기반 프론트엔드 API 통합",
        "description": "Vue3에서 Axios를 사용해 백엔드 CRUD API와 통신하는 서비스 모듈 작성",
        "details": "- src/api/posts.js 파일 생성\n- axios 인스턴스 생성(baseURL, timeout 설정)\n- getPosts(), getPost(id), createPost(data), updatePost(id,data), deletePost(id) 메서드 구현\n- 에러 핸들링 공통 로직(인터셉터) 정의",
        "testStrategy": "Vue 테스트 환경에서 jest + vue-test-utils 사용\n1) axios-mock-adapter로 API 호출 가짜 응답 설정 후\n2) 각 메서드 호출 시 올바른 요청 URL, method, response 데이터 검증",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Axios 인스턴스 생성 및 설정",
            "description": "baseURL과 timeout이 설정된 axios 인스턴스를 생성합니다.",
            "dependencies": [],
            "details": "src/api/posts.js 파일을 생성하고 axios.create를 사용해 baseURL 및 timeout 등 공통 옵션을 설정합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "CRUD 메서드 구현",
            "description": "getPosts, getPost, createPost, updatePost, deletePost 메서드를 구현합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "각 메서드에서 올바른 HTTP 메서드, URL, 요청/응답 처리 로직을 작성하고 Promise를 반환하도록 구성합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "인터셉터를 이용한 에러 핸들링",
            "description": "axios 인터셉터를 설정하여 응답 에러를 공통으로 처리합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "request/response 인터셉터를 추가해 HTTP 상태 코드별 에러 메시지 로깅 및 예외 처리를 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "테스트 케이스 작성 및 검증",
            "description": "Jest와 axios-mock-adapter를 사용해 API 호출 메서드를 테스트합니다.",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "각 CRUD 메서드 호출 시 요청 URL, 메서드, 페이로드, 응답값을 검증하는 단위 테스트를 구현합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "블로그 UI 컴포넌트 개발",
        "description": "TailwindCSS 스타일 기반으로 게시글 목록, 상세, 작성/수정 폼 컴포넌트 구현",
        "details": "- ListView.vue: 게시글 카드 리스트, category 필터 드롭다운 포함\n- DetailView.vue: 제목, 작성일, 내용 렌더링\n- PostForm.vue: title, content 입력 폼, category 드롭다운, 제출 버튼\n- 반응형 레이아웃(mobile, tablet, desktop) 스타일링",
        "testStrategy": "@vue/test-utils를 사용한 단위 테스트\n1) Props 전달 시 컴포넌트 렌더링 확인\n2) submit 이벤트 발생 시 emit 데이터 검증\n3) Tailwind 클래스 존재 여부 snapshoot 검증",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "컴포넌트 스캐폴딩 설정",
            "description": "Vue SFC 파일 생성 및 기본 구조 구성",
            "dependencies": [],
            "details": "프로젝트 내 components 폴더에 ListView.vue, DetailView.vue, PostForm.vue 파일 생성하고 TailwindCSS 기본 import 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "ListView.vue 구현",
            "description": "게시글 카드 리스트 및 카테고리 필터 구현",
            "dependencies": [
              "7.1"
            ],
            "details": "게시글 데이터를 props로 받도록 설정하고, v-for로 카드 리스트 렌더링. 카테고리 드롭다운 선택 시 필터링 로직 추가",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "DetailView.vue 구현",
            "description": "게시글 상세 화면 렌더링",
            "dependencies": [
              "7.1"
            ],
            "details": "props로 전달된 제목, 작성일, 내용을 화면에 표시. slot 또는 v-html로 콘텐츠 마크업 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "PostForm.vue 구현",
            "description": "게시글 작성/수정 폼 컴포넌트 작성",
            "dependencies": [
              "7.1"
            ],
            "details": "title, content 입력 폼 및 category 드롭다운 생성. 제출 시 submit 이벤트 emit 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "반응형 스타일링 및 단위 테스트",
            "description": "모바일·태블릿·데스크탑 대응 스타일링과 컴포넌트 테스트 작성",
            "dependencies": [
              "7.2",
              "7.3",
              "7.4"
            ],
            "details": "TailwindCSS breakpoints로 레이아웃 조정. @vue/test-utils로 props 렌더링, emit 이벤트, Tailwind 클래스 존재 여부 테스트 코드 작성",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "JWT 인증 기능 구현",
        "description": "FastAPI에서 토큰 기반 인증 (OAuth2 Password Bearer) 기능 추가",
        "details": "- PyJWT 사용해 Access Token 생성/검증 로직 작성\n- POST /auth/login 엔드포인트: 사용자 인증 후 토큰 반환\n- get_current_user 디펜던시 작성 및 protected CRUD 엔드포인트에 적용\n- 토큰 만료, 예외 처리 로직 구현",
        "testStrategy": "pytest 로\n1) 유효한 사용자로 로그인 시 200 + token 발급 확인\n2) 잘못된 자격증명 시 401 반환 확인\n3) Authorization 헤더 없는 요청 시 401 처리 검증",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "cancelled",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "프론트엔드 인증 통합",
        "description": "Vue3에서 로그인 폼 및 JWT 토큰 저장, Axios 인터셉터 설정, 라우트 보호 구현",
        "details": "- LoginView.vue, AuthService.js 작성\n- localStorage에 토큰 저장/삭제 로직\n- axios 인터셉터로 Authorization 헤더 자동 추가\n- vue-router navigation guard로 인증 필요한 라우트 보호",
        "testStrategy": "jest + @vue/test-utils\n1) 로그인 폼 입력 후 AuthService.login 호출 검증\n2) 토큰 저장/삭제 동작 테스트\n3) 인증 없는 상태에서 보호된 페이지 접근 시 리다이렉트 여부 확인",
        "priority": "medium",
        "dependencies": [
          2,
          8
        ],
        "status": "cancelled",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "ESLint·Prettier 및 CI 워크플로우 설정",
        "description": "프론트·백엔드 코드 품질 관리를 위한 ESLint, Prettier 설정 및 Git Hooks 구성",
        "details": "- 프론트엔드/.eslintrc.js, 백엔드/.flake8 또는 pylint 설정\n- .prettierrc, .prettierignore 파일 작성\n- Husky를 통해 pre-commit 훅에 lint-staged 적용\n- package.json, Makefile에 lint, format 스크립트 추가",
        "testStrategy": "로컬에서\n1) 의도적으로 스타일 에러가 있는 파일 생성 후 커밋 시 lint-staged가 자동 수정/차단 확인\n2) npm run lint, npm run format 스크립트 실행 시 오류 없이 통과",
        "priority": "low",
        "dependencies": [
          2,
          3
        ],
        "status": "deferred",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-31T08:12:18.104Z",
      "updated": "2025-07-31T09:28:55.877Z",
      "description": "Tasks for master context"
    }
  }
}